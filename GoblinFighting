import pyautogui
import cv2
import numpy as np
import time

def find_goblin(template_path, threshold=0.8):
    """
    Searches for the goblin template on the screen and returns its coordinates if found.

    :param template_path: Path to the goblin template image.
    :param threshold: Matching threshold for the template matching.
    :return: Coordinates of the goblin's center if found, otherwise None.
    """
    # Take a screenshot of the current screen
    screen = pyautogui.screenshot()

    # Convert the screenshot to a NumPy array
    screen_np = np.array(screen)

    # Convert the screenshot to grayscale
    screen_gray = cv2.cvtColor(screen_np, cv2.COLOR_BGR2GRAY)

    # Load the template image and convert it to grayscale
    template = cv2.imread(template_path, 0)
    w, h = template.shape[::-1]

    # Perform template matching
    res = cv2.matchTemplate(screen_gray, template, cv2.TM_CCOEFF_NORMED)

    # Find locations where the matching result exceeds the threshold
    loc = np.where(res >= threshold)

    # If a match is found, return the coordinates of the center of the match
    for pt in zip(*loc[::-1]):
        return pt[0] + w // 2, pt[1] + h // 2

    # Return None if no match is found
    return None

def attack_goblin(position):
    """
    Moves the mouse to the given position and clicks to attack.

    :param position: Coordinates of the goblin's center.
    """
    pyautogui.moveTo(position[0], position[1], duration=0.2)
    pyautogui.click()

def main():
    """
    Main loop to continuously find and attack goblins.
    """
    # List of paths to goblin images
    goblin_images = ['goblins/goblin1.png', 'goblins/goblin2.png']  # Add paths to your goblin images

    # Approximate time to finish attacking a goblin (in seconds)
    attack_duration = 10

    while True:
        found = False

        # Loop through each goblin image to find a match
        for goblin_image in goblin_images:
            position = find_goblin(goblin_image)

            # If a goblin is found, attack it
            if position:
                found = True
                attack_goblin(position)

                # Wait for the attack to finish
                time.sleep(attack_duration)

                # Break the loop to find the next goblin
                break

        # If no goblins are found, print a message and retry after a short delay
        if not found:
            print("No goblins found. Retrying...")
            time.sleep(1)  # Wait a bit before trying again

# Entry point of the script
if __name__ == "__main__":
    main()
